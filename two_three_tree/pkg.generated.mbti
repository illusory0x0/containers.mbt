// Generated using `moon info`, DON'T EDIT IT
package "illusory0x0/two_three_tree"

import(
  "illusory0x0/graphviz"
)

// Values

// Errors
pub suberror Imbalance

// Types and methods
type TwoThreeTree[A]
fn[A] TwoThreeTree::cons(A, Self[A]) -> Self[A]
fn[A] TwoThreeTree::empty() -> Self[A]
fn[A, B] TwoThreeTree::fold_left(Self[A], B, (B, A) -> B) -> B
fn[A, B] TwoThreeTree::fold_right(Self[A], B, (B, A) -> B) -> B
fn[A] TwoThreeTree::height(Self[A]) -> Int raise Imbalance
fn[A] TwoThreeTree::snoc(Self[A], A) -> Self[A]
fn[A : Show] TwoThreeTree::to_node_payload_tree(Self[A]) -> @graphviz.NodePayloadTree
fn[A] TwoThreeTree::uncons(Self[A]) -> ViewLeft[A]
fn[A] TwoThreeTree::unsnoc(Self[A]) -> ViewRight[A]

pub enum ViewLeft[A] {
  Nil
  Cons(A, TwoThreeTree[A])
}

pub enum ViewRight[A] {
  Lin
  Snoc(TwoThreeTree[A], A)
}

// Type aliases

// Traits

