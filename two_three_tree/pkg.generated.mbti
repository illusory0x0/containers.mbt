// Generated using `moon info`, DON'T EDIT IT
package "illusory0x0/containers/two_three_tree"

import(
  "illusory0x0/containers/graphviz"
)

// Values

// Errors
pub suberror Imblance

// Types and methods
type TwoThreeTree[A]
fn[A] TwoThreeTree::cons(A, Self[A]) -> Self[A]
fn[A] TwoThreeTree::empty() -> Self[A]
fn[A, B] TwoThreeTree::fold_left(Self[A], B, (B, A) -> B) -> B
fn[A, B] TwoThreeTree::fold_right(Self[A], B, (B, A) -> B) -> B
fn[A] TwoThreeTree::height(Self[A]) -> Int raise Imblance
fn[A : Show] TwoThreeTree::output(Self[A], &Logger) -> Unit // from trait `Show`
fn[A] TwoThreeTree::snoc(Self[A], A) -> Self[A]
fn[A : ToJson] TwoThreeTree::to_json(Self[A]) -> Json // from trait `ToJson`
fn[A : Show] TwoThreeTree::to_node_payload_tree(Self[A]) -> @graphviz.NodePayloadTree
fn[A : Show] TwoThreeTree::to_string(Self[A]) -> String // from trait `Show`
fn[A] TwoThreeTree::uncons(Self[A]) -> ViewLeft[A]
fn[A] TwoThreeTree::unsnoc(Self[A]) -> ViewRight[A]
impl[A : Show] Show for TwoThreeTree[A]
impl[A : ToJson] ToJson for TwoThreeTree[A]

pub enum ViewLeft[A] {
  Nil
  Cons(A, TwoThreeTree[A])
}

pub enum ViewRight[A] {
  Nil
  Snoc(TwoThreeTree[A], A)
}
fn[A : Show] ViewRight::output(Self[A], &Logger) -> Unit // from trait `Show`
fn[A : Show] ViewRight::to_string(Self[A]) -> String // from trait `Show`
impl[A : Show] Show for ViewRight[A]

// Type aliases

// Traits

