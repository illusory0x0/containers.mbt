// Generated using `moon info`, DON'T EDIT IT
package "illusory0x0/automaton"

import(
  "illusory0x0/graphviz"
  "moonbitlang/core/set"
)

// Values
const Epsilon : Char = 'Îµ'

const EpsilonSymbol : Int = 0

const ToplevelInitialState : Int = 0

// Errors

// Types and methods
pub struct DFA {
  initial : DFAS
  finals : @set.Set[DFAS]
  dfat : DFAT
}
fn DFA::output(Self, &Logger) -> Unit // from trait `Show`
fn DFA::to_digraph(Self, symbol_to_letter~ : (Int) -> Char) -> @graphviz.Digraph
fn DFA::to_json(Self) -> Json // from trait `ToJson`
fn DFA::to_string(Self) -> String // from trait `Show`
impl Show for DFA
impl ToJson for DFA

type DFAS
fn DFAS::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn DFAS::op_equal(Self, Self) -> Bool // from trait `Eq`
fn DFAS::output(Self, &Logger) -> Unit // from trait `Show`
fn DFAS::to_json(Self) -> Json // from trait `ToJson`
fn DFAS::to_string(Self) -> String // from trait `Show`
impl Eq for DFAS
impl Show for DFAS
impl ToJson for DFAS

type DFAT
fn DFAT::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn DFAT::op_equal(Self, Self) -> Bool // from trait `Eq`
fn DFAT::output(Self, &Logger) -> Unit // from trait `Show`
fn DFAT::to_json(Self) -> Json // from trait `ToJson`
fn DFAT::to_string(Self) -> String // from trait `Show`
impl Eq for DFAT
impl Show for DFAT
impl ToJson for DFAT

pub(all) struct NFA {
  initial : Int
  final_ : Int
  nfat : NFAT
}
fn NFA::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn NFA::op_equal(Self, Self) -> Bool // from trait `Eq`
fn NFA::output(Self, &Logger) -> Unit // from trait `Show`
fn NFA::powerset_construction(Self, Int) -> DFA
fn NFA::to_digraph(Self, symbol_to_letter~ : (Int) -> Char) -> @graphviz.Digraph
fn NFA::to_json(Self) -> Json // from trait `ToJson`
fn NFA::to_string(Self) -> String // from trait `Show`
impl Eq for NFA
impl Show for NFA
impl ToJson for NFA

pub struct NFAC {
  nfa : RNFA
  count : Int
}

type NFAT
fn NFAT::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn NFAT::op_equal(Self, Self) -> Bool // from trait `Eq`
fn NFAT::output(Self, &Logger) -> Unit // from trait `Show`
fn NFAT::to_digraph(Self, symbol_to_letter~ : (Int) -> Char) -> @graphviz.Digraph
fn NFAT::to_json(Self) -> Json // from trait `ToJson`
fn NFAT::to_string(Self) -> String // from trait `Show`
impl Eq for NFAT
impl Show for NFAT
impl ToJson for NFAT

pub(all) enum RNFA {
  Symbol(initial~ : Int, Int, final_~ : Int)
  Concat(RNFA, RNFA)
  Choice(initial~ : Int, RNFA, RNFA, final_~ : Int)
  Repeat(initial~ : Int, RNFA, final_~ : Int)
}
fn RNFA::compare(Self, Self) -> Int // from trait `Compare`
fn RNFA::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn RNFA::op_equal(Self, Self) -> Bool // from trait `Eq`
fn RNFA::output(Self, &Logger) -> Unit // from trait `Show`
fn RNFA::to_digraph(Self, symbol_to_letter~ : (Int) -> Char) -> @graphviz.Digraph
fn RNFA::to_json(Self) -> Json // from trait `ToJson`
fn RNFA::to_string(Self) -> String // from trait `Show`
impl Compare for RNFA
impl Eq for RNFA
impl Show for RNFA
impl ToJson for RNFA

pub(all) enum Regex {
  Concat(Regex, Regex)
  Choice(Regex, Regex)
  Repeat(Regex)
  Symbol(Int)
}
fn Regex::compare(Self, Self) -> Int // from trait `Compare`
fn Regex::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn Regex::op_equal(Self, Self) -> Bool // from trait `Eq`
fn Regex::output(Self, &Logger) -> Unit // from trait `Show`
fn Regex::to_json(Self) -> Json // from trait `ToJson`
fn Regex::to_nfa(Self, initial~ : Int) -> NFA
fn Regex::to_nfac(Self, initial~ : Int) -> NFAC
fn Regex::to_string(Self) -> String // from trait `Show`
impl Compare for Regex
impl Eq for Regex
impl Show for Regex
impl ToJson for Regex

// Type aliases

// Traits

